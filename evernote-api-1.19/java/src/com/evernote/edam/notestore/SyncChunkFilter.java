/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 *  This structure is used with the 'getFilteredSyncChunk' call to provide
 *  fine-grained control over the data that's returned when a client needs
 *  to synchronize with the service. Each flag in this structure specifies
 *  whether to include one class of data in the results of that call.
 * 
 * <dl>
 *  <dt>includeNotes</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.notes field
 *    </dd>
 * 
 *  <dt>includeNoteResources</dt>
 *    <dd>
 *    If true, then the server will include the 'resources' field on all of
 *    the Notes that are in SyncChunk.notes.
 *    If 'includeNotes' is false, then this will have no effect.
 *    </dd>
 * 
 *  <dt>includeNoteAttributes</dt>
 *    <dd>
 *    If true, then the server will include the 'attributes' field on all of
 *    the Notes that are in SyncChunks.notes.
 *    If 'includeNotes' is false, then this will have no effect.
 *    </dd>
 * 
 *  <dt>includeNotebooks</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.notebooks field
 *    </dd>
 * 
 *  <dt>includeTags</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.tags field
 *    </dd>
 * 
 *  <dt>includeSearches</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.searches field
 *    </dd>
 * 
 *  <dt>includeResources</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.resources field.
 *    Since the Resources are also provided with their Note
 *    (in the Notes.resources list), this is primarily useful for clients that
 *    want to watch for changes to individual Resources due to recognition data
 *    being added.
 *    </dd>
 * 
 *  <dt>includeLinkedNotebooks</dt>
 *    <dd>
 *    If true, then the server will include the SyncChunks.linkedNotebooks field.
 *    </dd>
 * 
 *  <dt>includeExpunged</dt>
 *    <dd>
 *    If true, then the server will include the 'expunged' data for any type
 *    of included data.  For example, if 'includeTags' and 'includeExpunged'
 *    are both true, then the SyncChunks.expungedTags field will be set with
 *    the GUIDs of tags that have been expunged from the server.
 *    </dd>
 *  </dl>
 */
public class SyncChunkFilter implements TBase<SyncChunkFilter, SyncChunkFilter._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SyncChunkFilter");

  private static final TField INCLUDE_NOTES_FIELD_DESC = new TField("includeNotes", TType.BOOL, (short)1);
  private static final TField INCLUDE_NOTE_RESOURCES_FIELD_DESC = new TField("includeNoteResources", TType.BOOL, (short)2);
  private static final TField INCLUDE_NOTE_ATTRIBUTES_FIELD_DESC = new TField("includeNoteAttributes", TType.BOOL, (short)3);
  private static final TField INCLUDE_NOTEBOOKS_FIELD_DESC = new TField("includeNotebooks", TType.BOOL, (short)4);
  private static final TField INCLUDE_TAGS_FIELD_DESC = new TField("includeTags", TType.BOOL, (short)5);
  private static final TField INCLUDE_SEARCHES_FIELD_DESC = new TField("includeSearches", TType.BOOL, (short)6);
  private static final TField INCLUDE_RESOURCES_FIELD_DESC = new TField("includeResources", TType.BOOL, (short)7);
  private static final TField INCLUDE_LINKED_NOTEBOOKS_FIELD_DESC = new TField("includeLinkedNotebooks", TType.BOOL, (short)8);
  private static final TField INCLUDE_EXPUNGED_FIELD_DESC = new TField("includeExpunged", TType.BOOL, (short)9);

  private boolean includeNotes;
  private boolean includeNoteResources;
  private boolean includeNoteAttributes;
  private boolean includeNotebooks;
  private boolean includeTags;
  private boolean includeSearches;
  private boolean includeResources;
  private boolean includeLinkedNotebooks;
  private boolean includeExpunged;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    INCLUDE_NOTES((short)1, "includeNotes"),
    INCLUDE_NOTE_RESOURCES((short)2, "includeNoteResources"),
    INCLUDE_NOTE_ATTRIBUTES((short)3, "includeNoteAttributes"),
    INCLUDE_NOTEBOOKS((short)4, "includeNotebooks"),
    INCLUDE_TAGS((short)5, "includeTags"),
    INCLUDE_SEARCHES((short)6, "includeSearches"),
    INCLUDE_RESOURCES((short)7, "includeResources"),
    INCLUDE_LINKED_NOTEBOOKS((short)8, "includeLinkedNotebooks"),
    INCLUDE_EXPUNGED((short)9, "includeExpunged");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INCLUDE_NOTES
          return INCLUDE_NOTES;
        case 2: // INCLUDE_NOTE_RESOURCES
          return INCLUDE_NOTE_RESOURCES;
        case 3: // INCLUDE_NOTE_ATTRIBUTES
          return INCLUDE_NOTE_ATTRIBUTES;
        case 4: // INCLUDE_NOTEBOOKS
          return INCLUDE_NOTEBOOKS;
        case 5: // INCLUDE_TAGS
          return INCLUDE_TAGS;
        case 6: // INCLUDE_SEARCHES
          return INCLUDE_SEARCHES;
        case 7: // INCLUDE_RESOURCES
          return INCLUDE_RESOURCES;
        case 8: // INCLUDE_LINKED_NOTEBOOKS
          return INCLUDE_LINKED_NOTEBOOKS;
        case 9: // INCLUDE_EXPUNGED
          return INCLUDE_EXPUNGED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INCLUDENOTES_ISSET_ID = 0;
  private static final int __INCLUDENOTERESOURCES_ISSET_ID = 1;
  private static final int __INCLUDENOTEATTRIBUTES_ISSET_ID = 2;
  private static final int __INCLUDENOTEBOOKS_ISSET_ID = 3;
  private static final int __INCLUDETAGS_ISSET_ID = 4;
  private static final int __INCLUDESEARCHES_ISSET_ID = 5;
  private static final int __INCLUDERESOURCES_ISSET_ID = 6;
  private static final int __INCLUDELINKEDNOTEBOOKS_ISSET_ID = 7;
  private static final int __INCLUDEEXPUNGED_ISSET_ID = 8;
  private boolean[] __isset_vector = new boolean[9];

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INCLUDE_NOTES, new FieldMetaData("includeNotes", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_NOTE_RESOURCES, new FieldMetaData("includeNoteResources", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_NOTE_ATTRIBUTES, new FieldMetaData("includeNoteAttributes", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_NOTEBOOKS, new FieldMetaData("includeNotebooks", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_TAGS, new FieldMetaData("includeTags", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_SEARCHES, new FieldMetaData("includeSearches", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_RESOURCES, new FieldMetaData("includeResources", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_LINKED_NOTEBOOKS, new FieldMetaData("includeLinkedNotebooks", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_EXPUNGED, new FieldMetaData("includeExpunged", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SyncChunkFilter.class, metaDataMap);
  }

  public SyncChunkFilter() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncChunkFilter(SyncChunkFilter other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.includeNotes = other.includeNotes;
    this.includeNoteResources = other.includeNoteResources;
    this.includeNoteAttributes = other.includeNoteAttributes;
    this.includeNotebooks = other.includeNotebooks;
    this.includeTags = other.includeTags;
    this.includeSearches = other.includeSearches;
    this.includeResources = other.includeResources;
    this.includeLinkedNotebooks = other.includeLinkedNotebooks;
    this.includeExpunged = other.includeExpunged;
  }

  public SyncChunkFilter deepCopy() {
    return new SyncChunkFilter(this);
  }

  public void clear() {
    setIncludeNotesIsSet(false);
    this.includeNotes = false;
    setIncludeNoteResourcesIsSet(false);
    this.includeNoteResources = false;
    setIncludeNoteAttributesIsSet(false);
    this.includeNoteAttributes = false;
    setIncludeNotebooksIsSet(false);
    this.includeNotebooks = false;
    setIncludeTagsIsSet(false);
    this.includeTags = false;
    setIncludeSearchesIsSet(false);
    this.includeSearches = false;
    setIncludeResourcesIsSet(false);
    this.includeResources = false;
    setIncludeLinkedNotebooksIsSet(false);
    this.includeLinkedNotebooks = false;
    setIncludeExpungedIsSet(false);
    this.includeExpunged = false;
  }

  public boolean isIncludeNotes() {
    return this.includeNotes;
  }

  public void setIncludeNotes(boolean includeNotes) {
    this.includeNotes = includeNotes;
    setIncludeNotesIsSet(true);
  }

  public void unsetIncludeNotes() {
    __isset_vector[__INCLUDENOTES_ISSET_ID] = false;
  }

  /** Returns true if field includeNotes is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeNotes() {
    return __isset_vector[__INCLUDENOTES_ISSET_ID];
  }

  public void setIncludeNotesIsSet(boolean value) {
    __isset_vector[__INCLUDENOTES_ISSET_ID] = value;
  }

  public boolean isIncludeNoteResources() {
    return this.includeNoteResources;
  }

  public void setIncludeNoteResources(boolean includeNoteResources) {
    this.includeNoteResources = includeNoteResources;
    setIncludeNoteResourcesIsSet(true);
  }

  public void unsetIncludeNoteResources() {
    __isset_vector[__INCLUDENOTERESOURCES_ISSET_ID] = false;
  }

  /** Returns true if field includeNoteResources is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeNoteResources() {
    return __isset_vector[__INCLUDENOTERESOURCES_ISSET_ID];
  }

  public void setIncludeNoteResourcesIsSet(boolean value) {
    __isset_vector[__INCLUDENOTERESOURCES_ISSET_ID] = value;
  }

  public boolean isIncludeNoteAttributes() {
    return this.includeNoteAttributes;
  }

  public void setIncludeNoteAttributes(boolean includeNoteAttributes) {
    this.includeNoteAttributes = includeNoteAttributes;
    setIncludeNoteAttributesIsSet(true);
  }

  public void unsetIncludeNoteAttributes() {
    __isset_vector[__INCLUDENOTEATTRIBUTES_ISSET_ID] = false;
  }

  /** Returns true if field includeNoteAttributes is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeNoteAttributes() {
    return __isset_vector[__INCLUDENOTEATTRIBUTES_ISSET_ID];
  }

  public void setIncludeNoteAttributesIsSet(boolean value) {
    __isset_vector[__INCLUDENOTEATTRIBUTES_ISSET_ID] = value;
  }

  public boolean isIncludeNotebooks() {
    return this.includeNotebooks;
  }

  public void setIncludeNotebooks(boolean includeNotebooks) {
    this.includeNotebooks = includeNotebooks;
    setIncludeNotebooksIsSet(true);
  }

  public void unsetIncludeNotebooks() {
    __isset_vector[__INCLUDENOTEBOOKS_ISSET_ID] = false;
  }

  /** Returns true if field includeNotebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeNotebooks() {
    return __isset_vector[__INCLUDENOTEBOOKS_ISSET_ID];
  }

  public void setIncludeNotebooksIsSet(boolean value) {
    __isset_vector[__INCLUDENOTEBOOKS_ISSET_ID] = value;
  }

  public boolean isIncludeTags() {
    return this.includeTags;
  }

  public void setIncludeTags(boolean includeTags) {
    this.includeTags = includeTags;
    setIncludeTagsIsSet(true);
  }

  public void unsetIncludeTags() {
    __isset_vector[__INCLUDETAGS_ISSET_ID] = false;
  }

  /** Returns true if field includeTags is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeTags() {
    return __isset_vector[__INCLUDETAGS_ISSET_ID];
  }

  public void setIncludeTagsIsSet(boolean value) {
    __isset_vector[__INCLUDETAGS_ISSET_ID] = value;
  }

  public boolean isIncludeSearches() {
    return this.includeSearches;
  }

  public void setIncludeSearches(boolean includeSearches) {
    this.includeSearches = includeSearches;
    setIncludeSearchesIsSet(true);
  }

  public void unsetIncludeSearches() {
    __isset_vector[__INCLUDESEARCHES_ISSET_ID] = false;
  }

  /** Returns true if field includeSearches is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeSearches() {
    return __isset_vector[__INCLUDESEARCHES_ISSET_ID];
  }

  public void setIncludeSearchesIsSet(boolean value) {
    __isset_vector[__INCLUDESEARCHES_ISSET_ID] = value;
  }

  public boolean isIncludeResources() {
    return this.includeResources;
  }

  public void setIncludeResources(boolean includeResources) {
    this.includeResources = includeResources;
    setIncludeResourcesIsSet(true);
  }

  public void unsetIncludeResources() {
    __isset_vector[__INCLUDERESOURCES_ISSET_ID] = false;
  }

  /** Returns true if field includeResources is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeResources() {
    return __isset_vector[__INCLUDERESOURCES_ISSET_ID];
  }

  public void setIncludeResourcesIsSet(boolean value) {
    __isset_vector[__INCLUDERESOURCES_ISSET_ID] = value;
  }

  public boolean isIncludeLinkedNotebooks() {
    return this.includeLinkedNotebooks;
  }

  public void setIncludeLinkedNotebooks(boolean includeLinkedNotebooks) {
    this.includeLinkedNotebooks = includeLinkedNotebooks;
    setIncludeLinkedNotebooksIsSet(true);
  }

  public void unsetIncludeLinkedNotebooks() {
    __isset_vector[__INCLUDELINKEDNOTEBOOKS_ISSET_ID] = false;
  }

  /** Returns true if field includeLinkedNotebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeLinkedNotebooks() {
    return __isset_vector[__INCLUDELINKEDNOTEBOOKS_ISSET_ID];
  }

  public void setIncludeLinkedNotebooksIsSet(boolean value) {
    __isset_vector[__INCLUDELINKEDNOTEBOOKS_ISSET_ID] = value;
  }

  public boolean isIncludeExpunged() {
    return this.includeExpunged;
  }

  public void setIncludeExpunged(boolean includeExpunged) {
    this.includeExpunged = includeExpunged;
    setIncludeExpungedIsSet(true);
  }

  public void unsetIncludeExpunged() {
    __isset_vector[__INCLUDEEXPUNGED_ISSET_ID] = false;
  }

  /** Returns true if field includeExpunged is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeExpunged() {
    return __isset_vector[__INCLUDEEXPUNGED_ISSET_ID];
  }

  public void setIncludeExpungedIsSet(boolean value) {
    __isset_vector[__INCLUDEEXPUNGED_ISSET_ID] = value;
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INCLUDE_NOTES:
      if (value == null) {
        unsetIncludeNotes();
      } else {
        setIncludeNotes((Boolean)value);
      }
      break;

    case INCLUDE_NOTE_RESOURCES:
      if (value == null) {
        unsetIncludeNoteResources();
      } else {
        setIncludeNoteResources((Boolean)value);
      }
      break;

    case INCLUDE_NOTE_ATTRIBUTES:
      if (value == null) {
        unsetIncludeNoteAttributes();
      } else {
        setIncludeNoteAttributes((Boolean)value);
      }
      break;

    case INCLUDE_NOTEBOOKS:
      if (value == null) {
        unsetIncludeNotebooks();
      } else {
        setIncludeNotebooks((Boolean)value);
      }
      break;

    case INCLUDE_TAGS:
      if (value == null) {
        unsetIncludeTags();
      } else {
        setIncludeTags((Boolean)value);
      }
      break;

    case INCLUDE_SEARCHES:
      if (value == null) {
        unsetIncludeSearches();
      } else {
        setIncludeSearches((Boolean)value);
      }
      break;

    case INCLUDE_RESOURCES:
      if (value == null) {
        unsetIncludeResources();
      } else {
        setIncludeResources((Boolean)value);
      }
      break;

    case INCLUDE_LINKED_NOTEBOOKS:
      if (value == null) {
        unsetIncludeLinkedNotebooks();
      } else {
        setIncludeLinkedNotebooks((Boolean)value);
      }
      break;

    case INCLUDE_EXPUNGED:
      if (value == null) {
        unsetIncludeExpunged();
      } else {
        setIncludeExpunged((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INCLUDE_NOTES:
      return new Boolean(isIncludeNotes());

    case INCLUDE_NOTE_RESOURCES:
      return new Boolean(isIncludeNoteResources());

    case INCLUDE_NOTE_ATTRIBUTES:
      return new Boolean(isIncludeNoteAttributes());

    case INCLUDE_NOTEBOOKS:
      return new Boolean(isIncludeNotebooks());

    case INCLUDE_TAGS:
      return new Boolean(isIncludeTags());

    case INCLUDE_SEARCHES:
      return new Boolean(isIncludeSearches());

    case INCLUDE_RESOURCES:
      return new Boolean(isIncludeResources());

    case INCLUDE_LINKED_NOTEBOOKS:
      return new Boolean(isIncludeLinkedNotebooks());

    case INCLUDE_EXPUNGED:
      return new Boolean(isIncludeExpunged());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INCLUDE_NOTES:
      return isSetIncludeNotes();
    case INCLUDE_NOTE_RESOURCES:
      return isSetIncludeNoteResources();
    case INCLUDE_NOTE_ATTRIBUTES:
      return isSetIncludeNoteAttributes();
    case INCLUDE_NOTEBOOKS:
      return isSetIncludeNotebooks();
    case INCLUDE_TAGS:
      return isSetIncludeTags();
    case INCLUDE_SEARCHES:
      return isSetIncludeSearches();
    case INCLUDE_RESOURCES:
      return isSetIncludeResources();
    case INCLUDE_LINKED_NOTEBOOKS:
      return isSetIncludeLinkedNotebooks();
    case INCLUDE_EXPUNGED:
      return isSetIncludeExpunged();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncChunkFilter)
      return this.equals((SyncChunkFilter)that);
    return false;
  }

  public boolean equals(SyncChunkFilter that) {
    if (that == null)
      return false;

    boolean this_present_includeNotes = true && this.isSetIncludeNotes();
    boolean that_present_includeNotes = true && that.isSetIncludeNotes();
    if (this_present_includeNotes || that_present_includeNotes) {
      if (!(this_present_includeNotes && that_present_includeNotes))
        return false;
      if (this.includeNotes != that.includeNotes)
        return false;
    }

    boolean this_present_includeNoteResources = true && this.isSetIncludeNoteResources();
    boolean that_present_includeNoteResources = true && that.isSetIncludeNoteResources();
    if (this_present_includeNoteResources || that_present_includeNoteResources) {
      if (!(this_present_includeNoteResources && that_present_includeNoteResources))
        return false;
      if (this.includeNoteResources != that.includeNoteResources)
        return false;
    }

    boolean this_present_includeNoteAttributes = true && this.isSetIncludeNoteAttributes();
    boolean that_present_includeNoteAttributes = true && that.isSetIncludeNoteAttributes();
    if (this_present_includeNoteAttributes || that_present_includeNoteAttributes) {
      if (!(this_present_includeNoteAttributes && that_present_includeNoteAttributes))
        return false;
      if (this.includeNoteAttributes != that.includeNoteAttributes)
        return false;
    }

    boolean this_present_includeNotebooks = true && this.isSetIncludeNotebooks();
    boolean that_present_includeNotebooks = true && that.isSetIncludeNotebooks();
    if (this_present_includeNotebooks || that_present_includeNotebooks) {
      if (!(this_present_includeNotebooks && that_present_includeNotebooks))
        return false;
      if (this.includeNotebooks != that.includeNotebooks)
        return false;
    }

    boolean this_present_includeTags = true && this.isSetIncludeTags();
    boolean that_present_includeTags = true && that.isSetIncludeTags();
    if (this_present_includeTags || that_present_includeTags) {
      if (!(this_present_includeTags && that_present_includeTags))
        return false;
      if (this.includeTags != that.includeTags)
        return false;
    }

    boolean this_present_includeSearches = true && this.isSetIncludeSearches();
    boolean that_present_includeSearches = true && that.isSetIncludeSearches();
    if (this_present_includeSearches || that_present_includeSearches) {
      if (!(this_present_includeSearches && that_present_includeSearches))
        return false;
      if (this.includeSearches != that.includeSearches)
        return false;
    }

    boolean this_present_includeResources = true && this.isSetIncludeResources();
    boolean that_present_includeResources = true && that.isSetIncludeResources();
    if (this_present_includeResources || that_present_includeResources) {
      if (!(this_present_includeResources && that_present_includeResources))
        return false;
      if (this.includeResources != that.includeResources)
        return false;
    }

    boolean this_present_includeLinkedNotebooks = true && this.isSetIncludeLinkedNotebooks();
    boolean that_present_includeLinkedNotebooks = true && that.isSetIncludeLinkedNotebooks();
    if (this_present_includeLinkedNotebooks || that_present_includeLinkedNotebooks) {
      if (!(this_present_includeLinkedNotebooks && that_present_includeLinkedNotebooks))
        return false;
      if (this.includeLinkedNotebooks != that.includeLinkedNotebooks)
        return false;
    }

    boolean this_present_includeExpunged = true && this.isSetIncludeExpunged();
    boolean that_present_includeExpunged = true && that.isSetIncludeExpunged();
    if (this_present_includeExpunged || that_present_includeExpunged) {
      if (!(this_present_includeExpunged && that_present_includeExpunged))
        return false;
      if (this.includeExpunged != that.includeExpunged)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(SyncChunkFilter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SyncChunkFilter typedOther = (SyncChunkFilter)other;

    lastComparison = Boolean.valueOf(isSetIncludeNotes()).compareTo(typedOther.isSetIncludeNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeNotes()) {      lastComparison = TBaseHelper.compareTo(this.includeNotes, typedOther.includeNotes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeNoteResources()).compareTo(typedOther.isSetIncludeNoteResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeNoteResources()) {      lastComparison = TBaseHelper.compareTo(this.includeNoteResources, typedOther.includeNoteResources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeNoteAttributes()).compareTo(typedOther.isSetIncludeNoteAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeNoteAttributes()) {      lastComparison = TBaseHelper.compareTo(this.includeNoteAttributes, typedOther.includeNoteAttributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeNotebooks()).compareTo(typedOther.isSetIncludeNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeNotebooks()) {      lastComparison = TBaseHelper.compareTo(this.includeNotebooks, typedOther.includeNotebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeTags()).compareTo(typedOther.isSetIncludeTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeTags()) {      lastComparison = TBaseHelper.compareTo(this.includeTags, typedOther.includeTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeSearches()).compareTo(typedOther.isSetIncludeSearches());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeSearches()) {      lastComparison = TBaseHelper.compareTo(this.includeSearches, typedOther.includeSearches);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeResources()).compareTo(typedOther.isSetIncludeResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeResources()) {      lastComparison = TBaseHelper.compareTo(this.includeResources, typedOther.includeResources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeLinkedNotebooks()).compareTo(typedOther.isSetIncludeLinkedNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeLinkedNotebooks()) {      lastComparison = TBaseHelper.compareTo(this.includeLinkedNotebooks, typedOther.includeLinkedNotebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeExpunged()).compareTo(typedOther.isSetIncludeExpunged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeExpunged()) {      lastComparison = TBaseHelper.compareTo(this.includeExpunged, typedOther.includeExpunged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // INCLUDE_NOTES
          if (field.type == TType.BOOL) {
            this.includeNotes = iprot.readBool();
            setIncludeNotesIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // INCLUDE_NOTE_RESOURCES
          if (field.type == TType.BOOL) {
            this.includeNoteResources = iprot.readBool();
            setIncludeNoteResourcesIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // INCLUDE_NOTE_ATTRIBUTES
          if (field.type == TType.BOOL) {
            this.includeNoteAttributes = iprot.readBool();
            setIncludeNoteAttributesIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // INCLUDE_NOTEBOOKS
          if (field.type == TType.BOOL) {
            this.includeNotebooks = iprot.readBool();
            setIncludeNotebooksIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // INCLUDE_TAGS
          if (field.type == TType.BOOL) {
            this.includeTags = iprot.readBool();
            setIncludeTagsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // INCLUDE_SEARCHES
          if (field.type == TType.BOOL) {
            this.includeSearches = iprot.readBool();
            setIncludeSearchesIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // INCLUDE_RESOURCES
          if (field.type == TType.BOOL) {
            this.includeResources = iprot.readBool();
            setIncludeResourcesIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // INCLUDE_LINKED_NOTEBOOKS
          if (field.type == TType.BOOL) {
            this.includeLinkedNotebooks = iprot.readBool();
            setIncludeLinkedNotebooksIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // INCLUDE_EXPUNGED
          if (field.type == TType.BOOL) {
            this.includeExpunged = iprot.readBool();
            setIncludeExpungedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetIncludeNotes()) {
      oprot.writeFieldBegin(INCLUDE_NOTES_FIELD_DESC);
      oprot.writeBool(this.includeNotes);
      oprot.writeFieldEnd();
    }
    if (isSetIncludeNoteResources()) {
      oprot.writeFieldBegin(INCLUDE_NOTE_RESOURCES_FIELD_DESC);
      oprot.writeBool(this.includeNoteResources);
      oprot.writeFieldEnd();
    }
    if (isSetIncludeNoteAttributes()) {
      oprot.writeFieldBegin(INCLUDE_NOTE_ATTRIBUTES_FIELD_DESC);
      oprot.writeBool(this.includeNoteAttributes);
      oprot.writeFieldEnd();
    }
    if (isSetIncludeNotebooks()) {
      oprot.writeFieldBegin(INCLUDE_NOTEBOOKS_FIELD_DESC);
      oprot.writeBool(this.includeNotebooks);
      oprot.writeFieldEnd();
    }
    if (isSetIncludeTags()) {
      oprot.writeFieldBegin(INCLUDE_TAGS_FIELD_DESC);
      oprot.writeBool(this.includeTags);
      oprot.writeFieldEnd();
    }
    if (isSetIncludeSearches()) {
      oprot.writeFieldBegin(INCLUDE_SEARCHES_FIELD_DESC);
      oprot.writeBool(this.includeSearches);
      oprot.writeFieldEnd();
    }
    if (isSetIncludeResources()) {
      oprot.writeFieldBegin(INCLUDE_RESOURCES_FIELD_DESC);
      oprot.writeBool(this.includeResources);
      oprot.writeFieldEnd();
    }
    if (isSetIncludeLinkedNotebooks()) {
      oprot.writeFieldBegin(INCLUDE_LINKED_NOTEBOOKS_FIELD_DESC);
      oprot.writeBool(this.includeLinkedNotebooks);
      oprot.writeFieldEnd();
    }
    if (isSetIncludeExpunged()) {
      oprot.writeFieldBegin(INCLUDE_EXPUNGED_FIELD_DESC);
      oprot.writeBool(this.includeExpunged);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("SyncChunkFilter(");
    boolean first = true;

    if (isSetIncludeNotes()) {
      sb.append("includeNotes:");
      sb.append(this.includeNotes);
      first = false;
    }
    if (isSetIncludeNoteResources()) {
      if (!first) sb.append(", ");
      sb.append("includeNoteResources:");
      sb.append(this.includeNoteResources);
      first = false;
    }
    if (isSetIncludeNoteAttributes()) {
      if (!first) sb.append(", ");
      sb.append("includeNoteAttributes:");
      sb.append(this.includeNoteAttributes);
      first = false;
    }
    if (isSetIncludeNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("includeNotebooks:");
      sb.append(this.includeNotebooks);
      first = false;
    }
    if (isSetIncludeTags()) {
      if (!first) sb.append(", ");
      sb.append("includeTags:");
      sb.append(this.includeTags);
      first = false;
    }
    if (isSetIncludeSearches()) {
      if (!first) sb.append(", ");
      sb.append("includeSearches:");
      sb.append(this.includeSearches);
      first = false;
    }
    if (isSetIncludeResources()) {
      if (!first) sb.append(", ");
      sb.append("includeResources:");
      sb.append(this.includeResources);
      first = false;
    }
    if (isSetIncludeLinkedNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("includeLinkedNotebooks:");
      sb.append(this.includeLinkedNotebooks);
      first = false;
    }
    if (isSetIncludeExpunged()) {
      if (!first) sb.append(", ");
      sb.append("includeExpunged:");
      sb.append(this.includeExpunged);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

