#import "<%= s.proxy_class_name %>.h"
#import "TiUtils.h"
#import "TiThriftUtils.h"
#import "THTTPClient.h"
#import "TBinaryProtocol.h"

<%- structs.each do |struct| -%>
#import "<%= struct.struct.proxy_class_name %>.h"
<% end %>

#import "<%= @module_name %>.h"

@interface <%= @module_name %>(<%= s.class_name %>)
-(id)create<%= s.name %>Client:(id)arg;
@end

@implementation <%= @module_name %>(<%= s.class_name %>)
-(id)create<%= s.name %>Client:(id)arg
{
    ENSURE_SINGLE_ARG(arg, NSString);
    return [[[<%= s.proxy_class_name %> alloc] initWithUri:arg] autorelease];
}
@end


@implementation <%= s.proxy_class_name %> 

@synthesize client;


- (id)initWithUri: (NSString*)uri
{
    NSURL* nsurl = [[[NSURL alloc] initWithString: uri] autorelease];
    
    THTTPClient* httpClient = [[[THTTPClient alloc] initWithURL: nsurl] autorelease];
    TBinaryProtocol* protocol = [[[TBinaryProtocol alloc] initWithTransport:httpClient] autorelease];
    
    self.client = [[[<%= s.class_name %> alloc] initWithProtocol:protocol] autorelease];
    
    return self;
}

- (void)dealloc
{
    self.client = nil;
    [super dealloc];
}


<% s.functions.each do |function| %>
- (id)<%= function.name %>: (id)args
{
    ENSURE_ARG_COUNT(args, <%= function.arguments.length %>);
<%-
    idx = 0
    func_args = function.args.map do |arg|
        idx += 1
        " : " + arg.type.objc(@space, "[args objectAtIndex:#{idx-1}]")
    end
-%>
    return <%= function.result=='void' ? '@""' : function.result.titanium(@space, "[client #{function.name}#{func_args.join('')}]") %>;
}
<% end %>
@end
