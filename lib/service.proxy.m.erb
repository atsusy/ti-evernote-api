#import "<%= s.proxy_class_name %>.h"
#import "TiUtils.h"
#import "TiThriftUtils.h"
#import "THTTPClient.h"
#import "TBinaryProtocol.h"

<%- structs.each do |struct| -%>
#import "<%= struct.struct.proxy_class_name %>.h"
<% end %>

#import "<%= @module_name %>Module.h"

@implementation <%= @module_name %>Module (<%= s.class_name %>)
-(id)create<%= s.name %>Client:(id)arg
{
    ENSURE_SINGLE_ARG(arg, NSString);
    return [[[<%= s.proxy_class_name %> alloc] initWithUri:arg] autorelease];
}
@end


@implementation <%= s.proxy_class_name %> 

@synthesize client;


- (id)initWithUri: (NSString*)uri
{
    self = [super initWithUri:uri];
    if (self != nil) {
        self.client = [[[<%= s.class_name %> alloc] initWithProtocol:protocol] autorelease];
    }
    return self;
}

- (void)dealloc
{
    self.client = nil;
    [super dealloc];
}

<% s.functions.each do |function|
    idx = 0
    func_args = function.args.map do |arg|
        idx += 1
        " : " + arg.type.objc(@space, "[args objectAtIndex:#{idx-1}]")
    end
%>
- (id)<%= function.name %>: (id)args
{
    ENSURE_ARG_COUNT(args, <%= function.arguments.length + 1 %>);

    dispatch_async(queue, ^{
        KrollCallback* callback = [args objectAtIndex:<%= function.arguments.length %>];
        @try {
            <%=
                if function.result == 'void'
                    code = "[client #{function.name}#{func_args.join('')}]"
                    "%s;\n                    NSDictionary *event = [NSDictionary dictionary];" % code
                else
                    code = function.result.titanium(@space, "[client #{function.name}#{func_args.join('')}]")
                    'NSDictionary *event = [NSDictionary dictionaryWithObjectsAndKeys: %s, @"result", nil];' % code
                end
            %>
            [NSThread detachNewThreadSelector:@selector(dispatchCallback:) toTarget:self withObject:[NSArray arrayWithObjects:@"success", event, callback, nil]];
        }
        @catch (NSException *exception) {
            NSDictionary *event = [NSDictionary dictionaryWithObjectsAndKeys: exception, @"error", nil];
            [NSThread detachNewThreadSelector:@selector(dispatchCallback:) toTarget:self withObject:[NSArray arrayWithObjects:@"error", event, callback, nil]];
        }
    });
    return self;
}
<% end %>
@end
